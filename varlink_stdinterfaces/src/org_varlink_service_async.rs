#![doc = "This file was automatically generated by the varlink rust generator"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use async_trait::async_trait;
use serde_derive::{Deserialize, Serialize};
use std::io::BufRead;
use std::sync::Arc;
use varlink::{self, CallTrait};
#[allow(dead_code)]
#[derive(Clone, PartialEq, Debug)]
#[allow(clippy::enum_variant_names)]
pub enum ErrorKind {
    Varlink_Error,
    VarlinkReply_Error,
    InterfaceNotFound(Option<InterfaceNotFound_Args>),
    InvalidParameter(Option<InvalidParameter_Args>),
    MethodNotFound(Option<MethodNotFound_Args>),
    MethodNotImplemented(Option<MethodNotImplemented_Args>),
}
impl ::std::fmt::Display for ErrorKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ErrorKind::Varlink_Error => write!(f, "Varlink Error"),
            ErrorKind::VarlinkReply_Error => write!(f, "Varlink error reply"),
            ErrorKind::InterfaceNotFound(v) => {
                write!(f, "org.varlink.service.InterfaceNotFound: {:#?}", v)
            }
            ErrorKind::InvalidParameter(v) => {
                write!(f, "org.varlink.service.InvalidParameter: {:#?}", v)
            }
            ErrorKind::MethodNotFound(v) => {
                write!(f, "org.varlink.service.MethodNotFound: {:#?}", v)
            }
            ErrorKind::MethodNotImplemented(v) => {
                write!(f, "org.varlink.service.MethodNotImplemented: {:#?}", v)
            }
        }
    }
}
pub struct Error(
    pub ErrorKind,
    pub Option<Box<dyn std::error::Error + 'static + Send + Sync>>,
    pub Option<&'static str>,
);
impl Error {
    #[allow(dead_code)]
    pub fn kind(&self) -> &ErrorKind {
        &self.0
    }
}
impl From<ErrorKind> for Error {
    fn from(e: ErrorKind) -> Self {
        Error(e, None, None)
    }
}
impl std::error::Error for Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        self.1
            .as_ref()
            .map(|e| e.as_ref() as &(dyn std::error::Error + 'static))
    }
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Display::fmt(&self.0, f)
    }
}
impl std::fmt::Debug for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        use std::error::Error as StdError;
        if let Some(ref o) = self.2 {
            std::fmt::Display::fmt(o, f)?;
        }
        std::fmt::Debug::fmt(&self.0, f)?;
        if let Some(e) = self.source() {
            std::fmt::Display::fmt("\nCaused by:\n", f)?;
            std::fmt::Debug::fmt(&e, f)?;
        }
        Ok(())
    }
}
#[allow(dead_code)]
pub type Result<T> = std::result::Result<T, Error>;
impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        match e.kind() {
            varlink::ErrorKind::VarlinkErrorReply(r) => Error(
                ErrorKind::from(r),
                Some(Box::from(e)),
                Some(concat!(file!(), ":", line!(), ": ")),
            ),
            _ => Error(
                ErrorKind::Varlink_Error,
                Some(Box::from(e)),
                Some(concat!(file!(), ":", line!(), ": ")),
            ),
        }
    }
}
#[allow(dead_code)]
impl Error {
    pub fn source_varlink_kind(&self) -> Option<&varlink::ErrorKind> {
        use std::error::Error as StdError;
        let mut s: &dyn StdError = self;
        while let Some(c) = s.source() {
            let k = self
                .source()
                .and_then(|e| e.downcast_ref::<varlink::Error>())
                .map(|e| e.kind());
            if k.is_some() {
                return k;
            }
            s = c;
        }
        None
    }
}
impl From<&varlink::Reply> for ErrorKind {
    #[allow(unused_variables)]
    fn from(e: &varlink::Reply) -> Self {
        match e {
            varlink::Reply { error: Some(t), .. }
                if t == "org.varlink.service.InterfaceNotFound" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p.clone()) {
                        Ok(v) => ErrorKind::InterfaceNotFound(v),
                        Err(_) => ErrorKind::InterfaceNotFound(None),
                    },
                    _ => ErrorKind::InterfaceNotFound(None),
                }
            }
            varlink::Reply { error: Some(t), .. }
                if t == "org.varlink.service.InvalidParameter" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p.clone()) {
                        Ok(v) => ErrorKind::InvalidParameter(v),
                        Err(_) => ErrorKind::InvalidParameter(None),
                    },
                    _ => ErrorKind::InvalidParameter(None),
                }
            }
            varlink::Reply { error: Some(t), .. } if t == "org.varlink.service.MethodNotFound" => {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p.clone()) {
                        Ok(v) => ErrorKind::MethodNotFound(v),
                        Err(_) => ErrorKind::MethodNotFound(None),
                    },
                    _ => ErrorKind::MethodNotFound(None),
                }
            }
            varlink::Reply { error: Some(t), .. }
                if t == "org.varlink.service.MethodNotImplemented" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p.clone()) {
                        Ok(v) => ErrorKind::MethodNotImplemented(v),
                        Err(_) => ErrorKind::MethodNotImplemented(None),
                    },
                    _ => ErrorKind::MethodNotImplemented(None),
                }
            }
            _ => ErrorKind::VarlinkReply_Error,
        }
    }
}
#[allow(dead_code)]
pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_interface_not_found(&mut self, r#interface: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.service.InterfaceNotFound",
            Some(
                serde_json::to_value(InterfaceNotFound_Args { r#interface })
                    .map_err(varlink::map_context!())?,
            ),
        ))
    }
    fn reply_invalid_parameter(&mut self, r#parameter: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.service.InvalidParameter",
            Some(
                serde_json::to_value(InvalidParameter_Args { r#parameter })
                    .map_err(varlink::map_context!())?,
            ),
        ))
    }
    fn reply_method_not_found(&mut self, r#method: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.service.MethodNotFound",
            Some(
                serde_json::to_value(MethodNotFound_Args { r#method })
                    .map_err(varlink::map_context!())?,
            ),
        ))
    }
    fn reply_method_not_implemented(&mut self, r#method: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.varlink.service.MethodNotImplemented",
            Some(
                serde_json::to_value(MethodNotImplemented_Args { r#method })
                    .map_err(varlink::map_context!())?,
            ),
        ))
    }
}
impl VarlinkCallError for varlink::Call<'_> {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct InterfaceNotFound_Args {
    pub r#interface: String,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct InvalidParameter_Args {
    pub r#parameter: String,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct MethodNotFound_Args {
    pub r#method: String,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct MethodNotImplemented_Args {
    pub r#method: String,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetInfo_Reply {
    pub r#vendor: String,
    pub r#product: String,
    pub r#version: String,
    pub r#url: String,
    pub r#interfaces: Vec<String>,
}
impl varlink::VarlinkReply for GetInfo_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetInfo_Args {}
#[allow(dead_code)]
pub trait Call_GetInfo: VarlinkCallError + Send {
    fn reply(
        &mut self,
        r#vendor: String,
        r#product: String,
        r#version: String,
        r#url: String,
        r#interfaces: Vec<String>,
    ) -> varlink::Result<()> {
        self.reply_struct(
            GetInfo_Reply {
                r#vendor,
                r#product,
                r#version,
                r#url,
                r#interfaces,
            }
            .into(),
        )
    }
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetInterfaceDescription_Reply {
    pub r#description: String,
}
impl varlink::VarlinkReply for GetInterfaceDescription_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetInterfaceDescription_Args {
    pub r#interface: String,
}
#[allow(dead_code)]
pub trait Call_GetInterfaceDescription: VarlinkCallError + Send {
    fn reply(&mut self, r#description: String) -> varlink::Result<()> {
        self.reply_struct(GetInterfaceDescription_Reply { r#description }.into())
    }
}
#[allow(dead_code)]
pub struct AsyncCall {
    reply: Option<varlink::Reply>,
}
impl AsyncCall {
    pub fn new() -> Self {
        AsyncCall { reply: None }
    }
    pub fn take_reply(&mut self) -> Option<varlink::Reply> {
        self.reply.take()
    }
}
impl varlink::CallTrait for AsyncCall {
    fn reply_struct(&mut self, reply: varlink::Reply) -> varlink::Result<()> {
        self.reply = Some(reply);
        Ok(())
    }
    fn set_continues(&mut self, _cont: bool) {}
    fn to_upgraded(&mut self) {}
    fn is_oneway(&self) -> bool {
        false
    }
    fn wants_more(&self) -> bool {
        false
    }
    fn get_request(&self) -> Option<&varlink::Request<'_>> {
        None
    }
}
impl VarlinkCallError for AsyncCall {}
impl Call_GetInfo for AsyncCall {}
impl Call_GetInterfaceDescription for AsyncCall {}
#[async_trait]
#[allow(dead_code)]
pub trait VarlinkInterface {
    async fn get_info(&self, call: &mut dyn Call_GetInfo) -> varlink::Result<()>;
    async fn get_interface_description(
        &self,
        call: &mut dyn Call_GetInterfaceDescription,
        r#interface: String,
    ) -> varlink::Result<()>;
    fn call_upgraded(
        &self,
        _call: &mut varlink::Call,
        _bufreader: &mut dyn BufRead,
    ) -> varlink::Result<Vec<u8>> {
        Ok(Vec::new())
    }
}
#[allow(dead_code)]
pub trait VarlinkClientInterface {
    fn get_info(&self) -> varlink::AsyncMethodCall<GetInfo_Args, GetInfo_Reply, Error>;
    fn get_interface_description(
        &self,
        r#interface: String,
    ) -> varlink::AsyncMethodCall<GetInterfaceDescription_Args, GetInterfaceDescription_Reply, Error>;
}
#[allow(dead_code)]
pub struct VarlinkClient {
    connection: Arc<varlink::AsyncConnection>,
}
impl VarlinkClient {
    #[allow(dead_code)]
    pub fn new(connection: Arc<varlink::AsyncConnection>) -> Self {
        VarlinkClient { connection }
    }
}
impl VarlinkClientInterface for VarlinkClient {
    fn get_info(&self) -> varlink::AsyncMethodCall<GetInfo_Args, GetInfo_Reply, Error> {
        varlink::AsyncMethodCall::<GetInfo_Args, GetInfo_Reply, Error>::new(
            self.connection.clone(),
            "org.varlink.service.GetInfo",
            GetInfo_Args {},
        )
    }
    fn get_interface_description(
        &self,
        r#interface: String,
    ) -> varlink::AsyncMethodCall<GetInterfaceDescription_Args, GetInterfaceDescription_Reply, Error>
    {
        varlink :: AsyncMethodCall :: < GetInterfaceDescription_Args , GetInterfaceDescription_Reply , Error > :: new (self . connection . clone () , "org.varlink.service.GetInterfaceDescription" , GetInterfaceDescription_Args { r#interface })
    }
}
#[allow(dead_code)]
pub struct VarlinkInterfaceHandler {
    inner: Arc<dyn VarlinkInterface + Send + Sync>,
}
#[allow(dead_code)]
pub fn new(inner: Arc<dyn VarlinkInterface + Send + Sync>) -> VarlinkInterfaceHandler {
    VarlinkInterfaceHandler { inner }
}
#[async_trait]
impl varlink::AsyncConnectionHandler for VarlinkInterfaceHandler {
    async fn handle(
        &self,
        server: &mut varlink::sansio::Server,
        _upgraded_iface: Option<String>,
    ) -> varlink::Result<Option<String>> {
        while let Some(event) = server.poll_event() {
            match event {
                varlink::sansio::ServerEvent::Request { request } => {
                    let mut call = AsyncCall::new();
                    match request.method.as_ref() {
                        "org.varlink.service.GetInfo" => {
                            self.inner
                                .get_info(&mut call as &mut dyn Call_GetInfo)
                                .await?;
                        }
                        "org.varlink.service.GetInterfaceDescription" => {
                            if let Some(args) = request.parameters {
                                let args: GetInterfaceDescription_Args =
                                    serde_json::from_value(args).map_err(|e| {
                                        varlink::Error(
                                            varlink::ErrorKind::InvalidParameter(e.to_string()),
                                            None,
                                            None,
                                        )
                                    })?;
                                self.inner
                                    .get_interface_description(
                                        &mut call as &mut dyn Call_GetInterfaceDescription,
                                        args.r#interface,
                                    )
                                    .await?;
                            } else {
                                VarlinkCallError::reply_invalid_parameter(
                                    &mut call,
                                    "parameters".into(),
                                )?;
                            }
                        }
                        method => {
                            VarlinkCallError::reply_method_not_found(
                                &mut call,
                                method.to_string(),
                            )?;
                        }
                    }
                    if let Some(reply) = call.take_reply() {
                        server.send_reply(reply)?;
                    }
                }
                varlink::sansio::ServerEvent::Upgrade { interface } => {
                    return Ok(Some(interface));
                }
            }
        }
        Ok(None)
    }
}
